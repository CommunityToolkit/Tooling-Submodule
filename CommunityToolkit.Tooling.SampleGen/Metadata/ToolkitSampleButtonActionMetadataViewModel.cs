// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using CommunityToolkit.Tooling.SampleGen.Attributes;
using System.Windows.Input;

namespace CommunityToolkit.Tooling.SampleGen.Metadata;

/// <summary>
/// An INPC-enabled metadata container for data defined in an <see cref="ToolkitSampleButtonActionAttribute"/>.
/// </summary>
/// <remarks>
/// Instances of these are generated by the <see cref="ToolkitSampleMetadataGenerator"/> and
/// provided to the app alongside the sample registration.
/// </remarks>
public class ToolkitSampleButtonActionMetadataViewModel : IGeneratedToolkitSampleOptionViewModel
{
    private string? _title;
    private object? _value;
    private string _label;

    /// <summary>
    /// Creates a new instance of <see cref="ToolkitSampleButtonActionMetadataViewModel"/>.
    /// </summary>
    public ToolkitSampleButtonActionMetadataViewModel(string name, string label, string? title = null)
    {
        Name = name;

        _label = label;
        _title = title;
    }

    /// <inheritdoc cref="INotifyPropertyChanged.PropertyChanged"/>
    public event PropertyChangedEventHandler? PropertyChanged;

    /// <summary>
    /// A unique identifier for this option.
    /// </summary>
    /// <remarks>
    /// Used by the sample system to match up <see cref="ToolkitSampleButtonActionMetadataViewModel"/> to the original <see cref="ToolkitSampleButtonActionAttribute"/> and the control that declared it.
    /// </remarks>
    public string Name { get; }

    /// <summary>
    /// The current command value.
    /// </summary>
    /// <remarks>
    /// Provided to accomodate binding to a property that is a non-nullable <see cref="bool"/>.
    /// </remarks>
    public ICommand CommandValue
    {
        get => (ICommand)_value!;
        set
        {
            _value = value;
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Value)));
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(CommandValue)));
        }
    }

    /// <summary>
    /// The current value.
    /// </summary>
    public object? Value
    {
        get => _value;
        set
        {
            _value = value;
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Value)));
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(CommandValue)));
        }
    }

    /// <summary>
    /// The label to display inside the button.
    /// </summary>
    public string Label
    {
        get => _label;
        set
        {
            _label = value;
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Label)));
        }
    }

    /// <summary>
    /// A title to display on top of the button.
    /// </summary>
    public string? Title
    {
        get => _title;
        set
        {
            _title = value;
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Title)));
        }
    }
}
